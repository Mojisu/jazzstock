import manager.dbConnector as db
import time
from datetime import datetime as dt

def analysisSndBasicEachDay(stockcode,date):

    query = '''
INSERT INTO jazzdb.T_STOCK_SND_ANALYSIS_RESULT_TEMP
SELECT RS.STOCKCODE, RS.DATE, RS.CLOSE

	,ROUND((CLOSE-C2)/C2,5) AS P1
    ,ROUND((CLOSE-C3)/C3,5) AS P3
    ,ROUND((CLOSE-C5)/C5,5) AS P5
    ,ROUND((CLOSE-C20)/C20,5) AS P20
    ,ROUND((CLOSE-C60)/C60,5) AS P60
    
    ,ROUND(I1/SHARE,5) AS I1
    ,ROUND(I3/SHARE,5) AS I3
    ,ROUND(I5/SHARE,5) AS I5
    ,ROUND(I20/SHARE,5) AS I20
    ,ROUND(I60/SHARE,5) AS I60
    
    
    ,ROUND(F1/SHARE,5) AS I1
    ,ROUND(F3/SHARE,5) AS I3
    ,ROUND(F5/SHARE,5) AS I5
    ,ROUND(F20/SHARE,5) AS I20
    ,ROUND(F60/SHARE,5) AS I60
    
    
    ,ROUND(PS1/SHARE,5) AS PS1
    ,ROUND(PS3/SHARE,5) AS PS3
    ,ROUND(PS5/SHARE,5) AS PS5
    ,ROUND(PS20/SHARE,5) AS PS20
    ,ROUND(PS60/SHARE,5) AS PS60
    
    
    ,ROUND(FN1/SHARE,5)  AS FN1
    ,ROUND(FN3/SHARE,5)  AS FN3
    ,ROUND(FN5/SHARE,5)  AS FN5
    ,ROUND(FN20/SHARE,5) AS FN20
    ,ROUND(FN60/SHARE,5) AS FN60
	
	,ROUND(YG1/SHARE,5) AS  YG1
    ,ROUND(YG3/SHARE,5) AS  YG3
    ,ROUND(YG5/SHARE,5) AS  YG5
    ,ROUND(YG20/SHARE,5) AS YG20
    ,ROUND(YG60/SHARE,5) AS YG60
	
	,ROUND(S1/SHARE,5)  AS S1
    ,ROUND(S3/SHARE,5)  AS S3
    ,ROUND(S5/SHARE,5)  AS S5
    ,ROUND(S20/SHARE,5) AS S20
    ,ROUND(S60/SHARE,5) AS S60
	
	,ROUND(T1/SHARE,5)  AS T1
    ,ROUND(T3/SHARE,5)  AS T3
    ,ROUND(T5/SHARE,5)  AS T5
    ,ROUND(T20/SHARE,5) AS T20
    ,ROUND(T60/SHARE,5) AS T60
	
	,ROUND(IS1/SHARE,5)  AS IS1
    ,ROUND(IS3/SHARE,5)  AS IS3
    ,ROUND(IS5/SHARE,5)  AS IS5
    ,ROUND(IS20/SHARE,5) AS IS20
    ,ROUND(IS60/SHARE,5) AS IS60
	
	,ROUND(BK1/SHARE,5)  AS BK1
    ,ROUND(BK3/SHARE,5)  AS BK3
    ,ROUND(BK5/SHARE,5)  AS BK5
    ,ROUND(BK20/SHARE,5) AS BK20
    ,ROUND(BK60/SHARE,5) AS BK60
	
	,ROUND(NT1/SHARE,5)  AS NT1
    ,ROUND(NT3/SHARE,5)  AS NT3
    ,ROUND(NT5/SHARE,5)  AS NT5
    ,ROUND(NT20/SHARE,5) AS NT20
    ,ROUND(NT60/SHARE,5) AS NT60
	
	,ROUND(OC1/SHARE,5)  AS OC1
    ,ROUND(OC3/SHARE,5)  AS OC3
    ,ROUND(OC5/SHARE,5)  AS OC5
    ,ROUND(OC20/SHARE,5) AS OC20
    ,ROUND(OC60/SHARE,5) AS OC60
FROM

(

	SELECT A.STOCKCODE, A.DATE, ABS(A.CLOSE) AS CLOSE, C.SHARE+0.01 AS SHARE

		, SUM(ABS(A.CLOSE)) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS C2
		, SUM(ABS(A.CLOSE)) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 3 PRECEDING AND 3 PRECEDING) AS C3
		, SUM(ABS(A.CLOSE)) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 5 PRECEDING AND 5 PRECEDING) AS C5
		, SUM(ABS(A.CLOSE)) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 20 PRECEDING AND 20 PRECEDING) AS C20
		, SUM(ABS(A.CLOSE)) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 60 PRECEDING AND 60 PRECEDING) AS C60
		
		
		# 3,5,10,20 누적 매수
		, A.INS AS I1	
		, SUM(A.INS) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS I3
		, SUM(A.INS) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS I5
		#, SUM(A.INS) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 9 PRECEDING AND CURRENT ROW) AS I10
		, SUM(A.INS) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 19 PRECEDING AND CURRENT ROW) AS I20
		, SUM(A.INS) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 59 PRECEDING AND CURRENT ROW) AS I60

		, A.FOREI AS F1
		, SUM(A.FOREI) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS F3
		, SUM(A.FOREI) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS F5
		#, SUM(A.FOREI) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 9 PRECEDING AND CURRENT ROW) AS F10
		, SUM(A.FOREI) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 19 PRECEDING AND CURRENT ROW) AS F20
		, SUM(A.FOREI) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 59 PRECEDING AND CURRENT ROW) AS F60
		
		, A.PER AS PS1
		, SUM(A.PER) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)  AS PS3
		, SUM(A.PER) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)  AS PS5
		#, SUM(A.PER) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)  AS PS10
		, SUM(A.PER) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 19 PRECEDING AND CURRENT ROW) AS PS20
		, SUM(A.PER) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 59 PRECEDING AND CURRENT ROW) AS PS60

		, A.FINAN AS FN1
		, SUM(A.FINAN) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)  AS FN3
		, SUM(A.FINAN) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)  AS FN5
		#, SUM(A.FINAN) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)  AS FN10
		, SUM(A.FINAN) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 19 PRECEDING AND CURRENT ROW) AS FN20
		, SUM(A.FINAN) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 59 PRECEDING AND CURRENT ROW) AS FN60

		, A.YG AS YG1
		, SUM(A.YG) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)  AS YG3
		, SUM(A.YG) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)  AS YG5
		#, SUM(A.YG) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)  AS YG10
		, SUM(A.YG) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 19 PRECEDING AND CURRENT ROW) AS YG20
		, SUM(A.YG) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 59 PRECEDING AND CURRENT ROW) AS YG60

		, A.SAMO AS S1
		, SUM(A.SAMO) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)  AS S3
		, SUM(A.SAMO) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)  AS S5
		#, SUM(A.SAMO) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)  AS S10
		, SUM(A.SAMO) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 19 PRECEDING AND CURRENT ROW) AS S20
		, SUM(A.SAMO) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 59 PRECEDING AND CURRENT ROW) AS S60

		, A.TUSIN AS T1
		, SUM(A.TUSIN) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)  AS T3
		, SUM(A.TUSIN) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)  AS T5
		#, SUM(A.TUSIN) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)  AS T10
		, SUM(A.TUSIN) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 19 PRECEDING AND CURRENT ROW) AS T20
		, SUM(A.TUSIN) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 59 PRECEDING AND CURRENT ROW) AS T60


		, A.INSUR AS IS1
		, SUM(A.INSUR) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)  AS IS3
		, SUM(A.INSUR) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)  AS IS5
		#, SUM(A.INSUR) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)  AS IS10
		, SUM(A.INSUR) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 19 PRECEDING AND CURRENT ROW) AS IS20
		, SUM(A.INSUR) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 59 PRECEDING AND CURRENT ROW) AS IS60


		, A.NATION AS NT1
		, SUM(A.NATION) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)  AS NT3
		, SUM(A.NATION) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)  AS NT5
		#, SUM(A.NATION) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)  AS NT10
		, SUM(A.NATION) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 19 PRECEDING AND CURRENT ROW) AS NT20
		, SUM(A.NATION) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 59 PRECEDING AND CURRENT ROW) AS NT60

		, A.BANK AS BK1
		, SUM(A.BANK) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)  AS BK3
		, SUM(A.BANK) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)  AS BK5
		#, SUM(A.BANK) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)  AS BK10
		, SUM(A.BANK) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 19 PRECEDING AND CURRENT ROW) AS BK20
		, SUM(A.BANK) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 59 PRECEDING AND CURRENT ROW) AS BK60
			
		, A.OTHERCORPOR AS OC1    
		, SUM(A.OTHERCORPOR) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)  AS OC3
		, SUM(A.OTHERCORPOR) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW)  AS OC5
		#, SUM(A.OTHERCORPOR) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 9 PRECEDING AND CURRENT ROW)  AS OC10
		, SUM(A.OTHERCORPOR) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 19 PRECEDING AND CURRENT ROW) AS OC20
		, SUM(A.OTHERCORPOR) OVER (PARTITION BY A.STOCKCODE ORDER BY DATE ASC ROWS BETWEEN 59 PRECEDING AND CURRENT ROW) AS OC60



	FROM jazzdb.T_STOCK_SND_DAY A
	JOIN jazzdb.T_DATE_INDEXED B USING (DATE)
    JOIN (
			
            SELECT STOCKCODE, SHARE
            FROM
            (
				SELECT STOCKCODE, SHARE, ROW_NUMBER() OVER (PARTITION BY STOCKCODE ORDER BY DATE DESC) AS RN
				FROM jazzdb.T_STOCK_SHARES_INFO
				WHERE 1=1
				AND HOLDER = '유통주식수'
			) T1
            
            WHERE 1=1
            AND T1.RN = 1

    ) C ON (A.STOCKCODE = C.STOCKCODE)

	WHERE 1=1
	AND A.STOCKCODE = '%s'
	AND B.CNT < 70
) RS

WHERE RS.DATE = '%s'
;

''' %(stockcode,date)
    db.insert(query)





def db_readAll(dt):
    # DB에서 [종목명,종목코드] 로 구성된 데이터셋을 받아옴.
    # dbUpdateDate = db.selectSingleValue('SELECT max(date) FROM test.t_stock_shares_info')

    query = """

                        SELECT A.STOCKCODE, A.STOCKNAME
                        FROM jazzdb.T_STOCK_CODE_MGMT A
                        WHERE 1=1
                        AND A.STOCKCODE NOT IN (

                            SELECT STOCKCODE
                            FROM jazzdb.T_STOCK_SND_ANALYSIS_RESULT_TEMP
                            WHERE DATE = '%s'
                            GROUP BY STOCKCODE
                        )
                        AND A.LISTED = 1
                                                        """ % (dt)

    for eachRow in db.select(query):
        if (len(eachRow) > 0):
            itemDic[eachRow[1].upper()] = eachRow[0]
            codeDic[eachRow[0]] = eachRow[1].upper()

    print("[INFO] 종목명/종목코드를 메모리에 읽어왔습니다, 남은 종목 수: ", len(itemDic.keys()))


itemDic = {}
codeDic = {}


start = dt.now()
todaydate = dt.now().date()
db_readAll(dt.now().date())
for i,eachCode in enumerate(codeDic.keys()):

    # analysisSndBasicEachDay(eachCode, date)
    try:
        analysisSndBasicEachDay(eachCode,todaydate)
        if(i%400==0):
            print(i,todaydate,eachCode,dt.now()-start)
    except:
        print('error',todaydate,eachCode,)



#
# start = dt.now()
# for eachday in ['02','03','04','07','08','09','10']:
#
#     dtt = '2019-01-' + eachday
#     db_readAll(dtt)
#     for i,eachCode in enumerate(codeDic.keys()):
#
#         # analysisSndBasicEachDay(eachCode, date)
#         try:
#             analysisSndBasicEachDay(eachCode,dtt)
#             if(i%400==0):
#                 print(i,dtt,eachCode,dt.now()-start)
#         except:
#             print('error',dtt,eachCode,)
